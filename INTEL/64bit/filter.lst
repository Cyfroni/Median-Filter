     1                                  ;=====================================================================
     2                                  ; ARKO - Projekt na laboratorium intel x86
     3                                  ;
     4                                  ; Autor: Karol Orowski
     5                                  ; Opis:  funkcja filtruje medianowo obrazek
     6                                  ;         void filter(char* buffer, char* picture, char* result); 
     7                                  ;	   
     8                                  ;
     9                                  ;=====================================================================
    10                                  
    11                                  section	.text
    12                                  global  filter
    13                                  
    14                                  filter:
    15                                  	push	ebp
    16          ******************       error: instruction not supported in 64-bit mode
    17 00000000 89E5                    	mov	ebp, esp
    18                                  	
    19                                  	push	DWORD[ebp+16]
    20          ******************       error: instruction not supported in 64-bit mode
    21                                  	push	DWORD[ebp+12]
    22          ******************       error: instruction not supported in 64-bit mode
    23                                  
    24 00000002 678B450C                	mov	eax, [ebp+12]
    25                                  	push	DWORD[eax+18]
    26          ******************       error: instruction not supported in 64-bit mode
    27                                  	push	DWORD[eax+22]
    28          ******************       error: instruction not supported in 64-bit mode
    29                                  
    30 00000006 678B5DF4                	mov	ebx, [ebp-12]
    31 0000000A 67015DF4                	add	[ebp-12], ebx
    32 0000000E 67015DF4                	add	[ebp-12], ebx
    33                                  
    34                                  	;copy header
    35 00000012 B936000000              	mov	ecx, 54
    36 00000017 678B75F8                	mov	esi, [ebp-8]
    37 0000001B 678B7DFC                	mov	edi, [ebp-4]
    38 0000001F F3A4                    	rep movsb
    39 00000021 678975F8                	mov	[ebp-8], esi
    40 00000025 67897DFC                	mov	[ebp-4], edi
    41                                  
    42                                  	;calculate padding 
    43 00000029 678B4022                	mov	eax, [eax+34]
    44 0000002D 99                      	cdq
    45 0000002E 67F775F0                	div	DWORD[ebp-16]
    46                                  	push	eax	
    47          ******************       error: instruction not supported in 64-bit mode
    48 00000032 678B5DF4                	mov	ebx, [ebp-12]
    49 00000036 67295DEC                	sub	[ebp-20], ebx
    50 0000003A 678B5DEC                	mov	ebx, [ebp-20]
    51 0000003E 67015DF4                	add	[ebp-12], ebx
    52 00000042 67FF4DF0                	dec	DWORD[ebp-16]
    53                                  
    54                                  	;write 1st and 2nd row to buffer
    55 00000046 678B4DF4                	mov	ecx, [ebp-12]
    56 0000004A 67034DF4                	add	ecx, [ebp-12]
    57 0000004E 678B75F8                	mov	esi, [ebp-8]
    58 00000052 678B7D08                	mov	edi, [ebp+8]
    59 00000056 F3A4                    	rep movsb
    60 00000058 678975F8                	mov	[ebp-8], esi
    61                                  
    62                                  	;write 1st row to result
    63 0000005C 678B4DF4                	mov	ecx, [ebp-12]
    64 00000060 678B7508                	mov	esi, [ebp+8]
    65 00000064 678B7DFC                	mov	edi, [ebp-4]
    66 00000068 F3A4                    	rep movsb
    67 0000006A 67897DFC                	mov	[ebp-4], edi
    68                                  	
    69                                  	;initiate counters
    70 0000006E 6A01                    	push 	1	;row counter 			ebp-24
    71 00000070 6A00                    	push	0	;column counter			ebp-28
    72 00000072 6A00                    	push	0	;bit counter			ebp-32
    73                                  	
    74                                  add_new_row:
    75 00000074 67FF45E8                	inc  	DWORD[ebp-24]
    76                                  
    77                                  	;find place for new row in buffer
    78 00000078 678B45E8                    	mov      eax, [ebp-24]
    79 0000007C 99                         	cdq
    80 0000007D B903000000                  	mov      ecx, 3
    81 00000082 F7F9                        	idiv     ecx
    82                                  
    83 00000084 670FAF55F4                  	imul      edx, [ebp-12]
    84                                  
    85                                  	;write row to buffer
    86 00000089 678B7D08                	mov	edi, [ebp+8]
    87 0000008D 678B75F8                	mov	esi, [ebp-8]
    88 00000091 678B4DF4                	mov 	ecx, [ebp-12]
    89 00000095 01D7                    	add	edi, edx
    90 00000097 F3A4                    	rep movsb
    91 00000099 678975F8                	mov	[ebp-8], esi
    92                                  
    93                                  	;find previous "new row"
    94 0000009D 678B45E8                	mov      eax, [ebp-24]
    95 000000A1 FFC8                    	dec	 eax
    96 000000A3 99                          	cdq
    97 000000A4 B903000000                  	mov      ecx, 3
    98 000000A9 F7F9                        	idiv     ecx
    99                                  
   100 000000AB 670FAF55F4              	imul     edx, [ebp-12]
   101                                  	
   102                                  	;write first pixel of previous "new row" to result
   103 000000B0 678B7508                	mov	esi, [ebp+8]
   104 000000B4 01D6                    	add	esi, edx
   105                                  	push	esi		;ebp-36
   106          ******************       error: instruction not supported in 64-bit mode
   107 000000B6 B903000000              	mov	ecx, 3
   108 000000BB 678B7DFC                	mov	edi, [ebp-4]
   109 000000BF F3A4                    	rep movsb
   110 000000C1 67897DFC                	mov	[ebp-4], edi
   111                                  	
   112                                  	;column counter
   113 000000C5 67C745E403000000        	mov	DWORD[ebp-28], 3
   114                                  	
   115                                  writing:
   116                                  	;find pixel's column position in buffer
   117 000000CD 678B4508                	mov	eax, [ebp+8]
   118 000000D1 670345E4                	add	eax, [ebp-28]
   119                                  	push	eax		;ebp-40
   120          ******************       error: instruction not supported in 64-bit mode
   121 000000D5 678345E403              	add	DWORD[ebp-28], 3
   122                                  
   123 000000DA 67C645E000              	mov	BYTE[ebp-32], 0
   124                                  next_bit:
   125 000000DF 678B45D8                	mov	eax, [ebp-40]
   126 000000E3 670345E0                	add	eax, [ebp-32]
   127 000000E7 BB00000000              	mov	ebx, 0
   128                                  
   129                                  	;put 9 bytes on stack
   130 000000EC 678A58FD                	mov	bl, [eax-3]
   131                                  	push	ebx
   132          ******************       error: instruction not supported in 64-bit mode
   133 000000F0 678A18                  	mov	bl, [eax]
   134                                  	push	ebx
   135          ******************       error: instruction not supported in 64-bit mode
   136 000000F3 678A5803                	mov	bl, [eax+3]
   137                                  	push	ebx
   138          ******************       error: instruction not supported in 64-bit mode
   139 000000F7 670345F4                	add	eax, [ebp-12]
   140 000000FB 678A58FD                	mov	bl, [eax-3]
   141                                  	push	ebx
   142          ******************       error: instruction not supported in 64-bit mode
   143 000000FF 678A18                  	mov	bl, [eax]
   144                                  	push	ebx
   145          ******************       error: instruction not supported in 64-bit mode
   146 00000102 678A5803                	mov	bl, [eax+3]
   147                                  	push	ebx
   148          ******************       error: instruction not supported in 64-bit mode
   149 00000106 670345F4                	add	eax, [ebp-12]
   150 0000010A 678A58FD                	mov	bl, [eax-3]
   151                                  	push	ebx
   152          ******************       error: instruction not supported in 64-bit mode
   153 0000010E 678A18                  	mov	bl, [eax]
   154                                  	push	ebx
   155          ******************       error: instruction not supported in 64-bit mode
   156 00000111 678A5803                	mov	bl, [eax+3]
   157                                  	push	ebx
   158          ******************       error: instruction not supported in 64-bit mode
   159                                  	
   160                                  	;find_median
   161 00000115 6A00                    	push	0		;counter to 5 (5th smallest is median) ebp-80
   162 00000117 6A00                    	push	0		;counter to 8 (9 bytes to compare)     ebp-84
   163                                  
   164                                  next_smallest:
   165 00000119 67FE45B0                	inc	BYTE[ebp-80]
   166                                  
   167 0000011D 89E8                    	mov	eax, ebp	;buffer
   168 0000011F 83E850                  	sub	eax, 80 	
   169 00000122 B3FF                    	mov	bl, 255		;smallest
   170 00000124 67C645AC00              	mov	BYTE[ebp-84], 0
   171                                  
   172                                  find_smallest:
   173 00000129 67807DAC09              	cmp	BYTE[ebp-84], 9	
   174 0000012E 7413                    	je	smallest_found
   175                                  
   176 00000130 67FE45AC                	inc	BYTE[ebp-84]
   177 00000134 83C004                  	add	eax, 4  
   178 00000137 673A18                  	cmp	bl, BYTE[eax]
   179 0000013A 72ED                    	jb	find_smallest
   180                                  
   181 0000013C 678A18                  	mov	bl, [eax]	;smallest's value
   182 0000013F 89C2                    	mov	edx, eax	;smallest's address
   183 00000141 EBE6                    	jmp	find_smallest
   184                                  
   185                                  smallest_found:
   186 00000143 67C602FF                	mov	BYTE[edx], 255	;replace smallest with biggest
   187 00000147 67807DB004              	cmp	BYTE[ebp-80], 4
   188 0000014C 76CB                    	jbe	next_smallest
   189                                  
   190                                  	;median is in bl
   191 0000014E 678B45FC                	mov	eax, [ebp-4]
   192 00000152 678818                  	mov	[eax], bl
   193 00000155 67FF45FC                	inc	DWORD[ebp-4]
   194 00000159 83C42C                  	add	esp, 44
   195                                  
   196 0000015C 67FE45E0                	inc	BYTE[ebp-32]
   197 00000160 67807DE003              	cmp	BYTE[ebp-32], 3
   198 00000165 0F8574FFFFFF            	jne	next_bit
   199                                  
   200                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   201                                  
   202 0000016B 83C404                  	add	esp, 4
   203 0000016E 678B45E4                	mov	eax, [ebp-28]
   204 00000172 83C003                  	add	eax, 3
   205 00000175 670345EC                	add	eax, [ebp-20]
   206 00000179 673945F4                	cmp	[ebp-12], eax
   207 0000017D 0F854AFFFFFF            	jne	writing
   208                                  
   209                                  	;write last pixel and padding to result
   210                                  	pop	esi
   211          ******************       error: instruction not supported in 64-bit mode
   212 00000183 670375F4                	add	esi, [ebp-12]
   213 00000187 678B4DEC                	mov	ecx, [ebp-20]
   214 0000018B 83C103                  	add	ecx, 3
   215 0000018E 29CE                    	sub	esi, ecx
   216 00000190 678B7DFC                	mov	edi, [ebp-4]
   217 00000194 F3A4                    	rep	movsb	
   218 00000196 67897DFC                	mov	[ebp-4], edi
   219                                  	
   220 0000019A 678B45E8                	mov 	eax, [ebp-24]
   221 0000019E 673945F0                	cmp 	[ebp-16], eax
   222 000001A2 0F85CCFEFFFF            	jne	add_new_row
   223                                  
   224                                  	;find last row in buffer
   225 000001A8 678B45E8                	mov      eax, [ebp-24]
   226 000001AC 99                          	cdq
   227 000001AD B903000000                  	mov      ecx, 3
   228 000001B2 F7F9                        	idiv     ecx
   229                                  
   230 000001B4 670FAF55F4                  	imul      edx, [ebp-12]
   231                                  
   232                                  	;write last row to result
   233 000001B9 678B7508                	mov	esi, [ebp+8]
   234 000001BD 678B7DFC                	mov	edi, [ebp-4]
   235 000001C1 678B4DF4                	mov 	ecx, [ebp-12]
   236 000001C5 01D6                    	add	esi, edx
   237 000001C7 F3A4                    	rep movsb
   238 000001C9 67897DFC                	mov	[ebp-4], edi
   239                                  ending:
   240                                  
   241                                  	;mov	eax, esp
   242                                  	;sub	eax, ebp
   243                                  
   244                                  	;mov	esp, ebp
   245 000001CD 83C420                  	add	esp, 32
   246                                  	pop	ebp
   247          ******************       error: instruction not supported in 64-bit mode
   248 000001D0 C3                      	ret
   249                                  
   250                                  ;============================================
   251                                  ; STACK
   252                                  ;============================================
   253                                  ;
   254                                  ; 
   255                                  ;  |                             |
   256                                  ;  | result	                 | EBP+16
   257                                  ;  -------------------------------
   258                                  ;  | picture	                 | EBP+12
   259                                  ;  -------------------------------
   260                                  ;  | buffer	                 | EBP+8
   261                                  ;  -------------------------------
   262                                  ;  | return address              | EBP+4
   263                                  ;  -------------------------------
   264                                  ;  | previous ebp                | EBP
   265                                  ;  -------------------------------
   266                                  ;  | *result		         | EBP-4
   267                                  ;  -------------------------------
   268                                  ;  | *picture			 | EBP-8
   269                                  ;  -------------------------------
   270                                  ;  | 3*width+padding		 | EBP-12
   271                                  ;  -------------------------------
   272                                  ;  | height-1			 | EBP-16
   273                                  ;  -------------------------------
   274                                  ;  | padding			 | EBP-20
   275                                  ;  -------------------------------
   276                                  ;  | row counter 		 | EBP-24
   277                                  ;  -------------------------------
   278                                  ;  | column counter 		 | EBP-28
   279                                  ;  -------------------------------
   280                                  ;  | bit counter 		 | EBP-32
   281                                  ;  -------------------------------
   282                                  ;  | first and last pix		 | EBP-36
   283                                  ;  -------------------------------
   284                                  ;  | pixel position		 | EBP-40
   285                                  ;  -------------------------------
   286                                  ;  | bytes to calculate median	 | EBP-(44:76)
   287                                  ;  -------------------------------
   288                                  ;  | counter to 5 		 | EBP-80
   289                                  ;  -------------------------------
   290                                  ;  | counter to 8		 | EBP-84
   291                                  ;  |				 |
   292                                  ;============================================
   293                                  
   294                                  
   295                                  
   296                                  
   297                                  
